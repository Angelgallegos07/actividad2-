class GuessingGame {
    constructor(min = 1, max = 100) {
      this.min = min;
      this.max = max;
      this.secretNumber = this.generateRandomNumber();
    }
  
    generateRandomNumber() {
      return Math.floor(Math.random() * (this.max - this.min + 1)) + this.min;
    }
  
    play() {
      // Solicitar nombre y apellido al usuario
      const nombre = prompt("Por favor, ingresa tu nombre:");
      const apellido = prompt("Por favor, ingresa tu apellido:");
  
      // Convertir a may√∫sculas y mostrar mensaje de bienvenida
      const nombreCompleto = `${nombre} ${apellido}`.toUpperCase();
      alert(`¬°Bienvenido, ${nombreCompleto}!`);
      
      console.log("\n¬°Bienvenido al juego de adivinanza!");
      console.log(`Adivina el n√∫mero entre ${this.min} y ${this.max}.`);
      
      let guess = null;
      while (guess !== this.secretNumber) {
        guess = this.getUserGuess();
        if (guess === null) {
          console.log("‚ùå Entrada no v√°lida. Intenta de nuevo.");
          continue;
        }
        
        if (guess < this.secretNumber) {
          console.log("üîº M√°s alto.");
        } else if (guess > this.secretNumber) {
          console.log("üîΩ M√°s bajo.");
        } else {
          console.log(`üéâ ¬°Felicidades, ${nombreCompleto}! Adivinaste el n√∫mero ${this.secretNumber}! üéâ`);
          break;
        }
      }
    }
  
    getUserGuess() {
      while (true) {
        const input = prompt(`Introduce un n√∫mero entre ${this.min} y ${this.max}:`);
        const number = parseInt(input, 10);
        if (Number.isInteger(number) && number >= this.min && number <= this.max) {
          return number;
        }
        console.log("‚ùå Entrada inv√°lida. Ingresa un n√∫mero dentro del rango.");
      }
    }
  }
  
  // Funci√≥n para solicitar un n√∫mero v√°lido del usuario
  function solicitarNumero(mensaje) {
    let numero;
    do {
      const entrada = prompt(mensaje);
      numero = parseFloat(entrada);
      if (isNaN(numero) || numero <= 0) {
        alert("Por favor, ingresa un n√∫mero v√°lido mayor a cero.");
      }
    } while (isNaN(numero) || numero <= 0);
    return numero;
  }
  
  // Funci√≥n para calcular el √°rea de un rect√°ngulo
  function calcularArea(ancho, alto) {
    return ancho * alto;
  }
  
  // Funci√≥n para calcular el per√≠metro de un rect√°ngulo
  function calcularPerimetro(ancho, alto) {
    return 2 * (ancho + alto);
  }
  
  // Solicitar dimensiones del rect√°ngulo al usuario
  const ancho = solicitarNumero("Por favor, ingresa el ancho del rect√°ngulo:");
  const alto = solicitarNumero("Por favor, ingresa el alto del rect√°ngulo:");
  
  // Calcular valores
  const area = calcularArea(ancho, alto);
  const perimetro = calcularPerimetro(ancho, alto);
  
  // Mostrar resultados
  alert(`El √°rea del rect√°ngulo es: ${area.toFixed(2)}`);
  alert(`El per√≠metro del rect√°ngulo es: ${perimetro.toFixed(2)}`);
  
  // Funci√≥n para solicitar 5 n√∫meros al usuario
  function solicitarNumeros() {
    const numeros = [];
    for (let i = 0; i < 5; i++) {
      numeros.push(solicitarNumero(`Ingresa el n√∫mero ${i + 1}:`));
    }
    return numeros;
  }
  
  // Funciones para trabajar con arrays
  function sumaArray(numeros) {
    return numeros.reduce((a, b) => a + b, 0);
  }
  
  function promedioArray(numeros) {
    return sumaArray(numeros) / numeros.length;
  }
  
  function maxArray(numeros) {
    return Math.max(...numeros);
  }
  
  function minArray(numeros) {
    return Math.min(...numeros);
  }
  
  // Solicitar 5 n√∫meros al usuario y calcular estad√≠sticas
  const numeros = solicitarNumeros();
  alert(`Suma: ${sumaArray(numeros)}`);
  alert(`Promedio: ${promedioArray(numeros).toFixed(2)}`);
  alert(`N√∫mero mayor: ${maxArray(numeros)}`);
  alert(`N√∫mero menor: ${minArray(numeros)}`);
  
  // Funci√≥n para validar la contrase√±a
  function validarContrasena() {
    const contrasena = prompt("Por favor, ingresa una contrase√±a:");
    if (contrasena.length < 8) {
      alert("‚ùå Error: La contrase√±a debe tener al menos 8 caracteres.");
    } else {
      alert("‚úÖ √âxito: Contrase√±a v√°lida.");
    }
  }
  
  // Solicitar y validar la contrase√±a
  validarContrasena();
  
  // Iniciar el juego
  const game = new GuessingGame();
  game.play();
  